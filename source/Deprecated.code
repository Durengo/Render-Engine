#include <iostream>
#include <fstream>
#include <sstream>
#include <string>

#include <GL/glew.h>
#include <GLFW/glfw3.h>

#include "lib/debugbreak/debugbreak.h"

#define ASSERT(X) if (!(X)) debug_break();
#define GLCall(x) GLClearError(); \
    x;                            \
    ASSERT(GLLogCall(#x, __FILE__, __LINE__))


static void GLClearError()
{
    while (glGetError() != GL_NO_ERROR);
}

static bool GLLogCall(const char* function, const char* file, int line)
{
    while (GLenum error = glGetError())
    {
        std::cout << "[OpenGL Error] (" << error << ") " << function << " " << file << " LINE: " << line << std::endl;
        return false;
    }
    return true;
}

struct ShaderProgramSource {
    std::string VertexSource;
    std::string FragmentSource;
};

static ShaderProgramSource ParseShader(const std::string &filepath) {
    std::ifstream stream(filepath);

    enum class ShaderType {
        NONE = -1, VERTEX = 0, FRAGMENT = 1
    };

    std::string line;
    std::stringstream ss[2];
    ShaderType type = ShaderType::NONE;

    while (getline(stream, line)) {
        if (line.find("#shader") != std::string::npos) {
            if (line.find("vertex") != std::string::npos) {
                type = ShaderType::VERTEX;
            } else if (line.find("fragment") != std::string::npos) {
                type = ShaderType::FRAGMENT;
            }
        } else {
            ss[(int) type] << line << '\n';
        }
    }
    return {ss[0].str(), ss[1].str()};
}

static unsigned int CompileShader(unsigned int type, const std::string &source) {
    unsigned int id = glCreateShader(type);
    const char *src = source.c_str();
    glShaderSource(id, 1, &src, nullptr);
    glCompileShader(id);

    int result;
    glGetShaderiv(id, GL_COMPILE_STATUS, &result);
    if (result == GL_FALSE) {
        int length;
        glGetShaderiv(id, GL_INFO_LOG_LENGTH, &length);
        char message[length];
        glGetShaderInfoLog(id, length, &length, message);
        std::cout << "Failed to compile" << (type == GL_VERTEX_SHADER ? "vertex" : "fragment") << "shader!"
                  << std::endl;
        std::cout << message << std::endl;
        glDeleteShader(id);
        return 0;
    }

    return id;
}

static unsigned int CreateShader(const std::string &vertexShader, const std::string &fragmentShader) {
    GLCall(unsigned int program = glCreateProgram());
    GLCall(unsigned int vs = CompileShader(GL_VERTEX_SHADER, vertexShader));
    GLCall(unsigned int fs = CompileShader(GL_FRAGMENT_SHADER, fragmentShader));

    GLCall(glAttachShader(program, vs));
    GLCall(glAttachShader(program, fs));
    GLCall(glLinkProgram(program));
    GLCall(glValidateProgram(program));

    GLCall(glDeleteShader(vs));
    GLCall(glDeleteShader(fs));

    return program;
}

int main() {
    GLFWwindow *window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(640, 480, "Hello World", NULL, NULL);
    if (!window) {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    glfwSwapInterval(1);

    if (glewInit() != GLEW_OK)
        std::cout << "Error! GLEW initialization failure." << std::endl;

    std::cout << glGetString(GL_VERSION) << std::endl;

    float positions[] = {
            -0.5f, -0.5f,
            0.5f, -0.5f,
            0.5f, 0.5f,
            -0.5f, 0.5f,
    };

    unsigned int indices[] = {
            0, 1, 2,
#include "testTexture2D.h"
            2, 3, 0
    };

    unsigned int vao;
    GLCall(glGenVertexArrays(1, &vao));
    GLCall(glBindVertexArray(vao));

    GLCall(unsigned int buffer);
    GLCall(glGenBuffers(1, &buffer));
    GLCall(glBindBuffer(GL_ARRAY_BUFFER, buffer));
    GLCall(glBufferData(GL_ARRAY_BUFFER, 4 * 2 * sizeof(float), positions, GL_STATIC_DRAW));

    GLCall(glEnableVertexAttribArray(0));
    GLCall(glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 2, nullptr));

    GLCall(unsigned int ibo);
    GLCall(glGenBuffers(1, &ibo));
    GLCall(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo));
    GLCall(glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * sizeof(unsigned int), indices, GL_STATIC_DRAW));

    GLCall(ShaderProgramSource source = ParseShader("../res/shaders/Basic.shader"));
    GLCall(unsigned int shader = CreateShader(source.VertexSource, source.FragmentSource));
    GLCall(glUseProgram(shader));

    int location = glGetUniformLocation(shader, "u_Color");
    ASSERT(location != -1);
    GLCall(glBindVertexArray(0));
    //GLCall(glUniform4f(location, 1.0f, 0.5f, 0.3f, 1.0f));

    float r = 0.0f;
    float incrementR = 0.05f;
    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window)) {
        /* Render here */
        glClear(GL_COLOR_BUFFER_BIT);

        GLCall(glUniform4f(location, r, 0.3f, 0.5f, 1.0f));

        GLCall(glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nullptr));

        if (r > 1.0f){
            incrementR = -0.05f;
        }
        else if (r < 0.0f){
            incrementR = 0.05f;
        }
        r += incrementR;

        //glDrawArrays(GL_TRIANGLES, 0, 6);
        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }

    GLCall(glDeleteProgram(shader));

    glfwTerminate();
    return 0;
}

				float positionsold[] = {
								-0.5f, -0.5f, 0.0f, 0.0f,
								0.5f, -0.5f, 1.0f, 0.0f,
								0.5f, 0.5f, 1.0f, 1.0f,
								-0.5f, 0.5f, 0.0f, 1.0f
				};
				//upscale
				float positions[] = {
								-50.0f, -50.0f, 0.0f, 0.0f,
								50.0f, -50.0f, 1.0f, 0.0f,
								50.0f, 50.0f, 1.0f, 1.0f,
								-50.0f, 50.0f, 0.0f, 1.0f
				};

				float positionsoldold[] = {
								-6.0f, -3.5f, 0.0f, 0.0f,
								6.0f, -3.5f, 3.0f, 0.0f,
								6.0f, 3.5f, 3.0f, 3.0f,
								-6.0f, 3.5f, 0.0f, 3.0f
				};

				unsigned int indices[] = {
								0, 1, 2,
								2, 3, 0
				};

//				GLCall(glEnable(GL_BLEND));
//				GLCall(glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA));

//				unsigned int vao;
//				GLCall(glGenVertexArrays(1, &vao));
//				GLCall(glBindVertexArray(vao));
//
//				vertexArray va;
//				vertexBuffer vb(positions, 4 * 4 * sizeof(float));
//
//				vertexBufferLayout layout;
//				layout.PushFloat(2);
//				layout.PushFloat(2);
//				va.addBuffer(vb, layout);
//
//				indexBuffer ib(indices, 6);

				//16:9
				//glm::mat4 proj = glm::ortho(-0.5625f, 0.5625f, -1.0f, 1.0f, -1.0f, 1.0f);
				//4:3
				//glm::mat4 proj = glm::ortho(-2.0f, 2.0f, -1.5f, 1.5f, -1.0f, 1.0f);
				//current resolution

//				glm::mat4 proj = glm::ortho(0.0f, (float) width, 0.0f, (float) height, -1.0f, 1.0f);
//				glm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(0, 0, 0));

				//glm::mat4 model = glm::translate(glm::mat4(1.0f), glm::vec3(0, 100, 0));

				//column major, openGL so we must multiply in such order: projection matrix -> view matrix -> model matrix.
				//Model matrix: defines position, rotation and scale of the vertices of the model in the world.
				//View matrix: defines position and orientation of the "camera".
				//Projection matrix: Maps what the "camera" sees to NDC, taking care of aspect ratio and perspective.
				//glm::mat4 mvp = proj * view * model;

//				shader shader("../res/shaders/Basic.shader");
//				shader.Bind();
//				shader.setUniform4f("u_Color", 1.0f, 0.5f, 0.3f, 1.0f);

				//shader.setUniformMat4f("u_MVP", mvp);

				//rocks.jpg/.png; transparency.jpg

//				texture texture("../res/textures/rocks.jpg");
//				texture.Bind();
//				shader.setUniform1i("u_Texture", 0);
//
//				va.Unbind();
//				shader.Unbind();
//				vb.Unbind();
//				ib.Unbind();
//
//				float r = 0.0f;
//				float incrementR = 0.001f;
//				glm::vec3 translationA(0, 0, 0);
//				glm::vec3 translationB(400, 200, 0);





//						{
//								glm::mat4 model = glm::translate(glm::mat4(1.0f), translationA);
//								glm::mat4 mvp = proj * view * model;
//								shader.Bind();
//								shader.setUniformMat4f("u_MVP", mvp);
//								renderer.draw(va, ib, shader);
//						}
//						{
//								glm::mat4 model = glm::translate(glm::mat4(1.0f), translationB);
//								glm::mat4 mvp = proj * view * model;
//								shader.Bind();
//								shader.setUniformMat4f("u_MVP", mvp);
//								renderer.draw(va, ib, shader);
//						}
						//shader.setUniform4f("u_Color", r, 0.5f, 0.3f, 1.0f);

//						if (r > 1.0f) {
//								incrementR = -0.001f;
//						} else if (r < 0.0f) {
//								incrementR = 0.001f;
//						}
//						r += incrementR;

//						{
//								ImGui::SliderFloat3("Translation A", &translationA.x, 0.0f, width);
//								ImGui::SliderFloat3("Translation B", &translationB.x, 0.0f, width);
//						}